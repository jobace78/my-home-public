#!/usr/bin/env bash

# shellcheck source=bash44.conf
. "$(dirname "${0}")"/bash44.conf || exit 1
# shellcheck source=functions.conf
. "$(dirname "${0}")"/functions.conf

case "$(uname)" in
  Darwin*)
    ;;
  *)
    _exit 1 'Sorry, only macOS is supported at this moment, exiting.'
    ;;
esac

bases=()
id=0

#
# index:
#   - _help
#   - _print_code_workspace_begin
#   - _print_code_workspace_end
#   - _print_disabled_plugins_txt
#   - _print_git_hooks_commit_msg
#   - _print_git_hooks_prepare_commit_msg
#   - _print_gitignore
#   - _print_idea_properties
#   - _print_iml
#   - _print_misc_xml_begin
#   - _print_misc_xml_end
#   - _print_modules_xml_begin
#   - _print_modules_xml_end
#   - _print_profiles_settings_xml
#   - _print_vcs_xml_begin
#   - _print_vcs_xml_end
#   - _print_workspace_xml
#   - _print_xml
#

_help() {
  local exit_code
  exit_code="${1:-1}"
  cat << EOT

  Usage: $(basename "${0}") [OPTION...]

  Help options:
    -H Show this help message
    -U Display brief usage
    -V Print version

  Configuration file example:
  [...]
  /Users/jobace78/base1
  /Users/jobace78/base2
  [...]

  Notes:
    - We assume repos are located at '<base>/repos'
    - We assume workspaces are located at '<base>/workspaces'

EOT
  exit "${exit_code}"
}

_print_code_workspace_begin() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
{
  "folders": [
EOT
}

_print_code_workspace_end() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' >> "${path}"
  ],
  "settings": {}
}
EOT
}

_print_disabled_plugins_txt() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
DevKit
com.android.tools.idea.smali
com.intellij.CloudConfig
com.intellij.uiDesigner
com.jetbrains.gateway
com.jetbrains.settingsSync
intellij.ktor
org.jetbrains.android
org.jetbrains.settingsRepository
EOT
}

_print_git_hooks_commit_msg() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  if [ -x "${path}"/hooks/commit-msg ]; then
    :
  else
    mkdir -p "${path}"/hooks
    cat << 'EOT' > "${path}"/hooks/commit-msg
#!/usr/bin/env bash

EMAIL="$(git config user.email 2> /dev/null)"
NAME="$(git config user.name 2> /dev/null)"

if [ -z "${EMAIL}" ]; then
  echo "EMAIL environment variable is empty or undefined."
  exit 1
fi

if [ -z "${NAME}" ]; then
  echo "NAME environment variable is empty or undefined."
  exit 1
fi

if [ -x "$(command -v gpg)" ] && [ "$(git config commit.gpgsign 2> /dev/null)" = 'true' ]; then
  git interpret-trailers --if-exists doNothing --in-place "${1}" --trailer "Signed-off-by: ${NAME} <${EMAIL}>"
fi
EOT
    chmod 0755 "${path}"/hooks/commit-msg
  fi
}

_print_git_hooks_prepare_commit_msg() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  if [ -x "${path}"/hooks/prepare-commit-msg ]; then
    :
  else
    mkdir -p "${path}"/hooks
    cat << 'EOT' > "${path}"/hooks/prepare-commit-msg
#!/usr/bin/env bash

case "${2}" in
  commit|merge|squash|template)
    exit 0
    ;;
  message)
    current_message="$(grep -- "-- This message was automatically generated by" "${1}")"
    if [ -z "${current_message}" ]; then
      git status --porcelain=v1 --untracked-files=no -M|grep -E ^'[ACDMRU]' >> "${1}"
      echo "-- This message was automatically generated by 'prepare-commit-msg'" >> "${1}"
    fi
    ;;
esac
EOT
    chmod 0755 "${path}"/hooks/prepare-commit-msg
  fi
}

_print_gitignore() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
*
EOT
}

_print_idea_properties() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
project.tree.structure.show.url=false
EOT
}

_print_iml() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
<?xml version="1.0" encoding="UTF-8"?>
<module type="WEB_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <content url="file://$MODULE_DIR$" />
    <exclude-output />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
EOT
}

_print_misc_xml_begin() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="FrameworkDetectionExcludesConfiguration" detection-enabled="false" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
EOT
}

_print_misc_xml_end() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' >> "${path}"
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/.idea/out" />
  </component>
</project>
EOT
}

_print_modules_xml_begin() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
EOT
}

_print_modules_xml_end() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' >> "${path}"
    </modules>
  </component>
</project>
EOT
}

_print_profiles_settings_xml() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
<component name="InspectionProjectProfileManager">
  <settings>
    <option name="PROJECT_PROFILE" value="Default" />
    <option name="USE_PROJECT_PROFILE" value="false" />
    <version value="1.0" />
  </settings>
</component>
EOT
}

_print_vcs_xml_begin() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
EOT
}

_print_vcs_xml_end() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' >> "${path}"
  </component>
</project>
EOT
}

_print_workspace_xml() {
  # INFO : local variables
  local path
  local id
  path="${1:?}"
  id="${2:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << EOT > "${path}"
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangesViewManager">
    <option name="groupingKeys">
      <option value="directory" />
      <option value="module" />
    </option>
  </component>
  <component name="ProjectId" id="$(printf "${id}%.0s" {1..27})" />
</project>
EOT
}

_print_xml() {
  # INFO : local variables
  local path
  path="${1:?}"
  [ -d "$(dirname "${path}")" ] || mkdir -p "$(dirname "${path}")"
  cat << 'EOT' > "${path}"
<project version="4">
  <component name="ToolWindowManager">
    <layout>
      <window_info anchor="bottom" id="Build" order="19" weight="0.39772728" />
      <window_info anchor="bottom" id="CheckStyle" order="18" show_stripe_button="false" weight="0.39772728" />
      <window_info anchor="bottom" id="Debug" order="17" weight="0.39772728" />
      <window_info anchor="bottom" id="Dependencies" order="16" weight="0.39772728" />
      <window_info anchor="bottom" id="Endpoints" order="15" show_stripe_button="false" weight="0.39772728" />
      <window_info anchor="bottom" id="File Transfer" order="14" weight="0.39772728" />
      <window_info anchor="bottom" id="Find" order="13" weight="0.39772728" />
      <window_info anchor="bottom" id="Messages" order="12" weight="0.39772728" />
      <window_info anchor="bottom" id="Notifications" order="11" weight="0.39772728" />
      <window_info anchor="bottom" id="Problems View" order="10" weight="0.39772728" />
      <window_info anchor="bottom" id="Profiler" order="9" show_stripe_button="false" weight="0.39772728" />
      <window_info anchor="bottom" id="Python Packages" order="8" show_stripe_button="false" weight="0.39772728" />
      <window_info anchor="bottom" id="Run" order="7" weight="0.39772728" />
      <window_info anchor="bottom" id="Services" order="6" weight="0.39772728" />
      <window_info anchor="bottom" id="SonarLint" order="5" weight="0.39772728" />
      <window_info anchor="bottom" id="Spring" order="4" show_stripe_button="false" weight="0.39772728" />
      <window_info anchor="bottom" id="Structure" order="3" weight="0.39772728" />
      <window_info anchor="bottom" id="TODO" order="2" weight="0.39772728" />
      <window_info anchor="bottom" id="Terminal" order="1" weight="0.39772728" />
      <window_info anchor="bottom" id="Version Control" order="0" weight="0.39772728" />
      <window_info anchor="right" id="Bean Validation" order="8" show_stripe_button="false" />
      <window_info anchor="right" id="Database Changes" order="7" show_stripe_button="false" />
      <window_info anchor="right" id="Flow" order="6" />
      <window_info anchor="right" id="Inspection" order="5" />
      <window_info anchor="right" id="Internal Method Tracing" order="4" />
      <window_info anchor="right" id="Project Problems" order="3" />
      <window_info anchor="right" id="SciView" order="2" show_stripe_button="false" />
      <window_info anchor="right" id="Space Automation" order="1" />
      <window_info anchor="right" id="TypeScript" order="0" />
      <window_info id="Ant" order="10" weight="0.25316456" />
      <window_info id="Bookmarks" order="9" weight="0.25316456" />
      <window_info id="Commit" order="8" weight="0.25316456" />
      <window_info id="Database" order="7" weight="0.25316456" />
      <window_info id="Favorites" order="6" weight="0.25316456" />
      <window_info id="Gradle" order="5" weight="0.25316456" />
      <window_info id="Learn" order="4" weight="0.25316456" />
      <window_info id="Maven" order="3" weight="0.25316456" />
      <window_info id="Project" order="2" weight="0.25316456" content_ui="combo" />
      <window_info id="Pull Requests" order="1" show_stripe_button="false" weight="0.25316456" />
      <window_info id="Space Code Reviews" order="0" weight="0.25316456" />
    </layout>
  </component>
  <component name="WindowStateProjectService">
    <state width="1331" height="697" key="find.popup" />
  </component>
</project>
EOT
}

trap '_catch_all ${?}' ERR SIGHUP SIGINT SIGQUIT SIGTERM

if [ -f "${HOME:?}"/."$(basename "${0}")".conf ]; then
  while read -r base; do
    if [ -d "${base}" ]; then
      bases+=("${base}")
    else
      echo "'${base}' was NOT found, continuing."
    fi
  done < <(grep -E -v '^\s*\#|^\s*$' "${HOME:?}"/."$(basename "${0}")".conf)
else
  echo "'${HOME:?}/.$(basename "${0}").conf' was NOT found..."
  _help 1
fi

OPTIND=1
while getopts 'HUV' ARGS; do
  case "${ARGS}" in
    H|U)
      _help 0
      ;;
    V)
      _exit 0 'v3'
      ;;
    ?)
      _help 1
      ;;
  esac
done
shift $(( OPTIND - 1 ))

for base in "${bases[@]}"; do
  id=$(( id + 1 ))
  repos=()
  workspace_name="${base##*/}"
  #########
  # repos #
  #########
  for repo in "${base}"/repos/*; do
    if [ -f "${repo}"/.git/config ]; then
      _print_git_hooks_commit_msg "${repo}"/.git
      _print_git_hooks_prepare_commit_msg "${repo}"/.git
      repos+=("${repo}")
    fi
  done
  ########################
  # configuration (idea) #
  ########################
  if [ -n "${repos[*]}" ]; then
    echo "idea   [${base}/workspaces/${workspace_name:?}]..."
    # library
    #
    if ls "${HOME:?}"/Library/Application\ Support/JetBrains/IntelliJIdea* 1> /dev/null 2> /dev/null; then
      for version in "${HOME:?}"/Library/Application\ Support/JetBrains/IntelliJIdea*; do
        [ ! -f "${version}"/disabled_plugins.txt.lock ] && _print_disabled_plugins_txt "${version}"/disabled_plugins.txt
        [ ! -f "${version}"/idea.properties.lock ] && _print_idea_properties "${version}"/idea.properties
        _print_xml "${version}"/workspace/"$(printf "${id:?}%.0s" {1..27})".xml
      done
    fi
    # repos
    #
    for repo in "${repos[@]}"; do
      # shellcheck disable=SC2207
      repo_iml=($(find "${base}"/repos/"${repo##*/}" -maxdepth 1 -name "*.iml" -type f 2> /dev/null))
      if [ -n "${repo_iml[*]}" ]; then
        :
      else
        _print_iml "${base}"/repos/"${repo##*/}"/"${repo##*/}".iml
      fi
    done
    # workspace (init .idea)
    #
    rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/artifacts
    rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/compiler.xml
    rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/encodings.xml
    rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/jarRepositories.xml
    rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/libraries
    rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/markdown.xml
    rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/modules
    rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/python-terminal.xml
    mkdir -p "${base}"/workspaces/"${workspace_name:?}"/.idea
    if [ ! -d "${base}"/workspaces/"${workspace_name:?}"/dataSources.nosync ] || [ ! -L "${base}"/workspaces/"${workspace_name:?}"/.idea/dataSources ]; then
      rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/dataSources
      mkdir -p "${base}"/workspaces/"${workspace_name:?}"/dataSources.nosync
      ln -s "${base}"/workspaces/"${workspace_name:?}"/dataSources.nosync "${base}"/workspaces/"${workspace_name:?}"/.idea/dataSources
    fi
    if [ ! -d "${base}"/workspaces/"${workspace_name:?}"/httpRequests.nosync ] || [ ! -L "${base}"/workspaces/"${workspace_name:?}"/.idea/httpRequests ]; then
      rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/httpRequests
      mkdir -p "${base}"/workspaces/"${workspace_name:?}"/httpRequests.nosync
      ln -s "${base}"/workspaces/"${workspace_name:?}"/httpRequests.nosync "${base}"/workspaces/"${workspace_name:?}"/.idea/httpRequests
    fi
    if [ ! -d "${base}"/workspaces/"${workspace_name:?}"/out.nosync ] || [ ! -L "${base}"/workspaces/"${workspace_name:?}"/.idea/out ]; then
      rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/out
      mkdir -p "${base}"/workspaces/"${workspace_name:?}"/out.nosync
      ln -s "${base}"/workspaces/"${workspace_name:?}"/out.nosync "${base}"/workspaces/"${workspace_name:?}"/.idea/out
    fi
    if [ ! -d "${base}"/workspaces/"${workspace_name:?}"/shelf.nosync ] || [ ! -L "${base}"/workspaces/"${workspace_name:?}"/.idea/shelf ]; then
      rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/shelf
      mkdir -p "${base}"/workspaces/"${workspace_name:?}"/shelf.nosync
      ln -s "${base}"/workspaces/"${workspace_name:?}"/shelf.nosync "${base}"/workspaces/"${workspace_name:?}"/.idea/shelf
    fi
    if [ ! -d "${base}"/workspaces/"${workspace_name:?}"/sonarlint.nosync ] || [ ! -L "${base}"/workspaces/"${workspace_name:?}"/.idea/sonarlint ]; then
      rm -rf "${base}"/workspaces/"${workspace_name:?}"/.idea/sonarlint
      mkdir -p "${base}"/workspaces/"${workspace_name:?}"/sonarlint.nosync
      ln -s "${base}"/workspaces/"${workspace_name:?}"/sonarlint.nosync "${base}"/workspaces/"${workspace_name:?}"/.idea/sonarlint
    fi
    # workspace (.idea/.gitignore)
    #
    _print_gitignore "${base}"/workspaces/"${workspace_name:?}"/.idea/.gitignore
    # workspace (.idea/inspectionProfiles)
    #
    _print_profiles_settings_xml "${base}"/workspaces/"${workspace_name:?}"/.idea/inspectionProfiles/profiles_settings.xml
    # workspace (.idea/misc.xml)
    #
    _print_misc_xml_begin "${base}"/workspaces/"${workspace_name:?}"/.idea/misc.xml
    for repo in "${repos[@]}"; do
      if [ -f "${repo}"/pom.xml ]; then
        echo "        <option value=\"\$PROJECT_DIR\$/../../repos/${repo##*/}/pom.xml\" />" \
        >> "${base}"/workspaces/"${workspace_name:?}"/.idea/misc.xml
      fi
    done
    _print_misc_xml_end "${base}"/workspaces/"${workspace_name:?}"/.idea/misc.xml
    # workspace (.idea/modules.xml)
    #
    _print_modules_xml_begin "${base}"/workspaces/"${workspace_name:?}"/.idea/modules.xml
    for repo in "${repos[@]}"; do
      # shellcheck disable=SC2207
      repo_iml=($(find "${base}"/repos/"${repo##*/}" -maxdepth 1 -name "*.iml" -type f 2> /dev/null))
      echo "      <module fileurl=\"file://\$PROJECT_DIR\$/../../repos/${repo##*/}/${repo_iml[0]##*/}\" filepath=\"\$PROJECT_DIR\$/../../repos/${repo##*/}/${repo_iml[0]##*/}\" />" \
      >> "${base}"/workspaces/"${workspace_name:?}"/.idea/modules.xml
    done
    _print_modules_xml_end "${base}"/workspaces/"${workspace_name:?}"/.idea/modules.xml
    # workspace (.idea/vcs.xml)
    #
    _print_vcs_xml_begin "${base}"/workspaces/"${workspace_name:?}"/.idea/vcs.xml
    for repo in "${repos[@]}"; do
      echo "    <mapping directory=\"\$PROJECT_DIR\$/../../repos/${repo##*/}\" vcs=\"Git\" />" \
      >> "${base}"/workspaces/"${workspace_name:?}"/.idea/vcs.xml
    done
    _print_vcs_xml_end "${base}"/workspaces/"${workspace_name:?}"/.idea/vcs.xml
    # workspace (.idea/workspace.xml)
    #
    _print_workspace_xml "${base}"/workspaces/"${workspace_name:?}"/.idea/workspace.xml "${id:?}"
  fi
  ##########################
  # configuration (vscode) #
  ##########################
  if [ -n "${repos[*]}" ]; then
    echo "vscode [${base}/workspaces/${workspace_name:?}.code-workspace]..."
    # workspace (.code-workspace)
    #
    _print_code_workspace_begin "${base}"/workspaces/"${workspace_name:?}".code-workspace
    for repo in "${repos[@]::${#repos[@]}-1}"; do
      echo "    { \"path\": \"../repos/${repo##*/}\" }," \
      >> "${base}"/workspaces/"${workspace_name:?}".code-workspace
    done
    for repo in ${repos[-1]}; do
      echo "    { \"path\": \"../repos/${repo##*/}\" }" \
      >> "${base}"/workspaces/"${workspace_name:?}".code-workspace
    done
    if [ -f "${base}"/workspaces/"${workspace_name:?}".code-workspace.custom-settings ]; then
      cat "${base}"/workspaces/"${workspace_name:?}".code-workspace.custom-settings \
      >> "${base}"/workspaces/"${workspace_name:?}".code-workspace
    else
      _print_code_workspace_end "${base}"/workspaces/"${workspace_name:?}".code-workspace
    fi
  fi
done

_exit 0
